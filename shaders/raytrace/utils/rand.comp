#include "./utils/const.comp"

const float alpha_rand1 = 1/PHI;
const vec2 alpha_rand2 = 1/vec2(PHI_2, PHI_2 * PHI_2);
const vec3 alpha_rand3 = 1/vec3(PHI_3, PHI_3 * PHI_3, PHI_3 * PHI_3 * PHI_3);
const vec4 alpha_rand4 = 1 / vec4(
  PHI_4, 
  PHI_4 * PHI_4, 
  PHI_4 * PHI_4 * PHI_4, 
  PHI_4 * PHI_4 * PHI_4 * PHI_4
);

float _rand1 = 0.;
vec2 _rand2 = vec2(0.);
vec3 _rand3 = vec3(0.);
vec4 _rand4 = vec4(0.);

const int base = 1<<8;

// base rng
float vec_to_float(in vec2 x) { return dot(x, vec2(PHI, PI)); }
float vec_to_float(in vec3 x) { return dot(x, vec3(PHI, PI, SRT)); }
float vec_to_float(in vec4 x) { return dot(x, vec4(PHI, PI, SRT, E)); }

float random_0t1(in float x, in float seed) {
  _rand1 = fract(_rand1 + alpha_rand1);
  return fract(sin(x * (seed + t + base) * _rand1) * SRT * 10000.0);
}
vec2 random_0t1_2(in float x, in float seed) {
  _rand2 = fract(_rand2 + alpha_rand2);
  return fract(sin(x * (seed + t + base) * _rand2) * SRT * 10000.0);
}
vec3 random_0t1_3(in float x, in float seed) {
  _rand3 = fract(_rand3 + alpha_rand3);
  return fract(sin(x * (seed + t + base) * _rand3) * SRT * 10000.0);
}
vec4 random_0t1_4(in float x, in float seed) {
  _rand4 = fract(_rand4 + alpha_rand4);
  return fract(sin(x * (seed + t + base) * _rand4) * SRT * 10000.0);
}