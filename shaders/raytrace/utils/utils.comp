#define NEWTON_ITER 2
#define HALLEY_ITER 1

float cbrt( in float x )
{
	float y = sign(x) * uintBitsToFloat( floatBitsToUint( abs(x) ) / 3u + 0x2a514067u );

	for( int i = 0; i < NEWTON_ITER; ++i )
    	y = ( 2. * y + x / ( y * y ) ) * .333333333;

    for( int i = 0; i < HALLEY_ITER; ++i )
    {
    	float y3 = y * y * y;
        y *= ( y3 + 2. * x ) / ( 2. * y3 + x );
    }
    
    return y;
}

float dot2(in vec3 v) { return dot(v,v); }

float sq(in float v) { return v * v; }

vec3 sun_light_col(in vec3 dir, in vec3 norm, in vec3 light_color) {
  return max(dot(dir, norm), 0.) * light_color;
}

vec3 point_light_col(in vec3 pos, in vec3 norm, in Light light) {
  vec3 d = light.pos - pos;
  float mag_sq = dot(d, d);
  float mag = sqrt(mag_sq);
  vec3 dir = d / mag;
  return sun_light_col(dir, norm, light.color) / mag_sq;
}

float reflectance(float cos_angle, float index) {
  // Use Schlick's approximation for reflectance.
  float r0 = (1-index) / (1+index);
  r0 = r0 * r0;
  return mix(1., pow((1 - cos_angle), 5), r0);
}

float _reflectance(float cos_i, float cos_t, float index) {
  float s = (index * cos_i - cos_t) / (index * cos_i + cos_t);
  float p = (index * cos_t - cos_i) / (index * cos_t + cos_i);
  vec2 sp = vec2(s, p);

  return min(0.5 * dot(sp, sp), 1.);
}

float _reflectance(float cos_i, float index) {
  float cos_t = sqrt(1. - index * (1. - cos_i * cos_i));
  return _reflectance(cos_i, cos_t, index);
}

vec3 LinearToSRGB(vec3 rgb)
{
  rgb = clamp(rgb, 0.0f, 1.0f);
    
  return mix(
    pow(rgb, vec3(1.0 / 2.4)) * 1.055 - 0.055,
    rgb * 12.92,
    lessThan(rgb, vec3(0.0031308))
  );
}
 
vec3 SRGBToLinear(vec3 rgb)
{
  rgb = clamp(rgb, 0.0f, 1.0f);
    
  return mix(
    pow(((rgb + 0.055) / 1.055), vec3(2.4)),
    rgb / 12.92,
    lessThan(rgb, vec3(0.04045))
  );
}

vec3 ACESFilm(vec3 x)
{
  float a = 2.51f;
  float b = 0.03f;
  float c = 2.43f;
  float d = 0.59f;
  float e = 0.14f;
  return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);
}
